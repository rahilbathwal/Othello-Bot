In terms of building our Othello bot, we had a good team effort. Rahil and Anirudh worked together on implementing a random bot, and then a bot with a very simple heuristic that could beat SimplePlayer during the first phase of the assignment. We also worked together on a very basic implementation of minimax to a depth of 2. In the second phase of the assignment, Rahil worked extensively on increasing the depth of the minimax algorithm, the implementation of alpha-beta pruning (to optimize the combination of depth and speed), and implemented a shallow search algorithm, while Anirudh worked out the details of the heuristic, attempting to take into account as many metrics as possible without compromising on speed of the bot. Of course, both of us had several debugging sessions, putting our heads together to try and fix/optimize our code.

In terms of improvements to our bot, we went in stages. We first implemented a more complex minimax algorithm which would recursively search the tree of possible moves to several depths, and found that minimax alone was very very slow. We then implemented alpha-beta pruning, which significantly sped up our minimax algorithm. Along the way, our alpha-beta pruning implementation needed fixing, since we were, at various points, missing some edge cases, but with enough time put towards debugging, we were able to fix our issue. Furthermore, we implemented a shallow search algorithm which would allow for more pruning of the moves, and allowed our bot to function even faster. We also made several changes to the heuristic, attempting to keep track of various metrics such as simple piece differences, weighted positions on the board, mobility, frontier squares, corners captured, and positions adjacent to corner. 

At various points throughout the creation of our bot, we had ideas of implementing an endgame solver (which would help us optimize out bot towards the end of the game), and opening book, bitboards etc.